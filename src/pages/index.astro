---
import Dumbbell from "../components/dumbbell.astro"
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>100 a Day</title>

		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Bitcount:wght,CRSV@300,0&family=Exo+2&display=swap" rel="stylesheet">
	</head>
	<body onload="refresh()">
		<h1><Dumbbell/> 100 a Day</h1>
		<main>
			<div id="reps">0</div>
			<div id="tracker">
				<div id="tracked"></div>
			</div>
			<form>
				<input type="number" name="logged" />
				<input type="submit" value="Log" />
			</form>
		</main>
		<script is:inline>
			const config = {
				from : { hour: 5, minute: 0 },
				to : { hour: 20, minute: 0 },
				goal: 100
			};

			const units = {
				from: config.from.hour * 60 + config.from.minute,
				to: config.to.hour * 60 + config.to.minute,
			};
			units.minutesPerUnit = (units.to - units.from) / config.goal;

			async function refresh(logged=0) {
				let now = new Date();
				let today = new Date().toLocaleDateString();
				let projected = (now.getHours() * 60 + now.getMinutes() - units.from) / units.minutesPerUnit;
				let completed = logged*1;

				let logs = JSON.parse(await localStorage.getItem('100aDay'));
				if (logs && logs.lastUpdated === today) {
					completed += logs.completed*1;
				}

				localStorage.setItem('100aDay', JSON.stringify({
					lastUpdated: today,
					completed: completed
				}));

				document
					.querySelector("#reps")
					.setHTMLUnsafe(`${Math.min(Math.max(Math.ceil(projected-completed), 0), config.goal)}`);
				document
					.querySelector("#tracked")
					.setAttribute('style', `width:${completed}%`);
			}

			document.querySelector("form")?.addEventListener("submit", async (event) => {
				event.preventDefault();
				refresh(parseInt(event.target.logged.value || "0"));
				event.target.logged.value = null;
			});

			setInterval(refresh, 1000 * 60);
		</script>
	</body>
</html>

<style>
	:root {
		--background: 240 39% 15%;
		--foreground: 157 88% 76%;
		--accent: 319 100% 63%;
	}

	html {
		background-color: hsl(var(--background));
		color: hsl(var(--foreground));
		margin: 0;
		padding: 0;
	}
	body {
		max-width: 100ch;
		margin: 0 auto;
		padding: 0 1rem;

		font-family: "Exo 2", sans-serif;
		font-optical-sizing: auto;
		font-weight: 400;
		font-style: normal;
	}
	main {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		gap: 3rem;
	}
	h1, #reps {
		font-family: "Bitcount", system-ui;
		font-optical-sizing: auto;
		font-weight: 300;
		font-style: normal;
		font-variation-settings:
			"slnt" 0,
			"CRSV" 0,
			"ELSH" 0,
			"ELXP" 0;
	}

	#reps {
		font-size: 6rem;
		color: hsl(var(--accent));
	}
	#tracker {
		height: .25rem;
		background: hsl(var(--foreground) / .15);
		width: 100%;
	}
	#tracked {
		height: 100%;
		width: 0%; 
		background-color: hsl(var(--foreground));
	}

	input {
		border: solid 2px hsl(var(--foreground));
		padding: 0.5rem 1rem;
		font-size: 1rem;
		border-radius: 1.25rem;
		cursor: pointer;
	}
	input[type="submit"] {
		background-color: hsl(var(--foreground));
		color: hsl(var(--background));
	}
	input[type="number"] {
		background-color: hsl(var(--background));
		color: hsl(var(--foreground));
	}
	h1 {
		display: flex;
		align-items: center;
		gap: 1rem;
		font-size: 2.25rem;
		margin: 1rem 0;
	}
</style>